(TranslationUnit [(Module swap_m () [] [(ImplicitNone [] ())] [(Declaration () [(SimpleAttribute AttrPrivate)] [] ()) (Declaration () [(SimpleAttribute AttrPublic)] [(swap_t [] [] () None ())] (TriviaNode [] [(EndOfLine) (EndOfLine)])) (Template swap_t [T] [(Declaration () [(SimpleAttribute AttrPrivate)] [] ()) (Declaration () [(SimpleAttribute AttrPublic)] [(swap [] [] () None ())] (TriviaNode [] [(EndOfLine) (EndOfLine)])) (DerivedType T [] (TriviaNode [] [(EndOfLine) (EndOfLine)]) [] [] [])] [(Subroutine swap_generic [(x) (y)] [] () () [] [] [] [(Declaration (AttrType TypeType [] T None) [(AttrIntent InOut)] [(x [] [] () None ()) (y [] [] () None ())] ()) (Declaration (AttrType TypeType [] T None) [] [(tmp [] [] () None ())] (TriviaNode [] [(EndOfLine) (EndOfLine)]))] [(= 0 tmp x ()) (= 0 x y ()) (= 0 y tmp ())] [])])] [(Subroutine test_template [] [] () (TriviaNode [] [(EndOfLine) (EndOfLine)]) [] [] [] [(Instantiate swap_t [(AttrType TypeReal [] () None) (AttrType TypeComplex [] () None)] [(UseSymbol swap_generic swap)]) (Declaration (AttrType TypeReal [] () None) [] [(x [] [] () None ()) (y [] [] () None ())] ())] [(= 0 x 5 ()) (= 0 y 7 (TriviaNode [] [(EndOfLine) (Comment "! call swap(x, y)           We can keep this call after the concrete functions are generated. For now there is no function called "swap".")])) (If 0 () (/= x 7) [(ErrorStop 0 () () ())] [] () () ()) (If 0 () (/= y 5) [(ErrorStop 0 () () ())] [] () () ())] [])])])
